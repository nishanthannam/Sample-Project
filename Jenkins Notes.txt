                                                              Jenkins:
There are number of "Continuous Integration (CI) tools. They are:
a. Bamboo
b. Apache Gump
c. jenkins
d. Buildbot
e. Travis CI

There are number of tools that used to "Code" in Devops. They are:
a. Git
b. SVN

There are many tools that are used to 'Build" in Devops. They are:
a. Gradle
b. Maven

There are many tools that are used to "Deploy" in Devops. They are:
a. Ansible
b. Puppet
c. Docker

We will use 2 models in the Software Development Life Cycle (SDLC). They are:
a. Waterfall Model
b. Agile Model

Watefall Model:
a. 'Waterfall Model" is a traditional approach of software development
b. In "Waterfall Model", the development happens in a step by step manner
c. The steps for software development used in "Waterfall Model" are:
 1. Requirement Analysis
 2. Design
 3. Development
 4. Testing
 5. Maintenance

Disadvantages of Waterfall Model:
a. Any new requirements from the client will restart the development life cycle
b. If client is unhappy with the product, the entire project cycle is restarted
c. Until the requirements are not clear, the project can not start and is eventually delayed

Agile Model:
a. In "Agile Model", programmers create prototypes to understand client requirements
b. In "Agile Model", the entire process of building a software is broken down into small actionable blocks called "Sprints"
c. The entire process of building a software is broken down into:
 1. Plan
 2. Code
 3. Test
 4. Review

Workflow of Agile Model:
             Product backlog -------> Sprint planning ------> Sprint Backlog ------> Sprint ------> Deliverable Product ------> Product review
                                                                                                                                 ||
                                                                                                                                Daily Scrum
Advantages of Agile Model:
a. Client requirements are better understood becauseof the constant feedback
b. Product is delivered much faster as compared to "Waterfall Model'

Disadvantages of Agile Model:
a. The product gets tested only on Developer computers and not on Production systems
b. Developers and Operations team work in solos

NOTE:
"Agile Model" addresses the gaps between clients and Developers

What is Devops?
Answer:
a. "Devops" is an evolution from "Agile Model" of software development
b. "Developemnt team" will submit the application to the "Operations team" for the impementation
c. Operation team will monitor the application and provide the relevant feedback to Developers

Phases of Devops:
According to Devops practices, the workflow in Software development and delivery is divided into 8 phases. They are:
a. Plan
b. Code
c. Build
d. Test
e. Integrate
f. Deploy
g. Operate
h. Monitor

Technical benefits of Devops:
a. Continuous Software Delivery
b. Less complex problems to manage
c. Early detection and faster correction of defects

Business benefits of Devops:
a. Faster delivery of features
b. Stable operating environments
c. Improved communication and collaboration between the teams

Advantages of Devops:
a. Time taken to create and deliver Software is reduced
b.  Complexity of maintaining an application will be reduced
c. Improved collaboration between Developers and Operations team
d. Continuous integration and delivery ensure afster time to market

What is Jenkins?
Answer:
a. "Jenkins" is an open source automation server. 
b. "Jenkins" helps automate the parts of software development related to building, testing, and deploying, facilitating continuous integration and continuous delivery. 
c. "Jenkins" is a server-based system that runs in servlet containers such as Apache Tomcat

Why we use Jenkins?
Answer:
 "Jenkins" is used to build and test your product continuously, so developers can continuously integrate changes into the build

NOTE:
a. The most popular used for "Testing" in Devops is ----> Selenium
b. The tool that is used to automate "Monitoring" phase in Devops is ----> Nagios

Versions of Jenkins:
There are 2 versions of Jenkins. They are:
a. Open source Jenkins
b. Enterprise version Jenkins (In this version, "CloudBees" will give support)

History of Jenkins:
a. "Jenkins" was developed by ---> Kohsuke Kawaguchi
b. The old name of Jenkins is ---> Hudson
c. "Hudson" was developed in 2011 by Oracle
d. Till January 2020, "Oracle" gave support to "Hudson" which had been shut down now
e. "Oracle" is relaeasing newer versions of "Jenkins" every day

Scenario before Jenkins:

Features of Jenkins:
a. Easy installation
b. Easy Configuration
c. Available Plug-ins
d. Extensible
e. Easy Distribution
f. Free-Open Source

What is Continuous Integration?
Answer:
"Continuous integration" is the practice of merging all developers' working copies (or) code to a "Shared mainline" (Github or Gitlab) several times a day

What is Continuous Delivery or Continuous Deployment?
Answer:
a. "Continuous deployment" involves important 'operations' activities that are frequently associated with the 'Ops' in DevOps. 
b. These activities are focused on deploying solutions to production environments, verifying their functional integrity, and ensuring they can be effectively monitored and supported post-release.

Installation of Jenkins:
We can install Jenkins in multiple servers like Windows, Linux, and Mac
The number of ways we can install Jenkins in Windowa are::
a. By using "jenkins.war file" (This can be installed by using "Tomcat Apache" or without "Tomcat Apache" also)
b. By using "jenkins.msi file"

Installation of Jenkins by using "jenkins.msi" file:
a. Go to "Jenkins.io" and download either an LTS release or a weekly release of the Windows installer. 
b. After the download completes, open the Windows installer and follow the steps below to install Jenkins.
Step 1:
On opening the "Windows Installer", an "Installation Setup Wizard" appears, Click Next on the Setup Wizard to start your installation

Step 2:
Select the destination folder to store your Jenkins Installation and click Next to continue.

Step 3:
a. To run "Jenkins service" using a local or domain user, specify the domain user name and password with which you want to run Jenkins
b. click on "Test Credentials" to test your domain credentials and click on Next.
NOTE:
When Installing Jenkins, it is recommended to install and run Jenkins as an independent windows service using a local or domain user as it is much safer than running Jenkins using LocalSystem(Windows equivalent of root) which will grant Jenkins full access to your machine and services.

Step 4:
a. Specify the port on which Jenkins will be running, 
b. "Test Port" button is used to validate whether the specified port if free on your machine or not. 
c. Consequently, if the port is free, it will show a green tick mark as shown below, then click on Next.

Step 5:
a. The installation process checks for Java on your machine and prefills the dialog with the Java home directory. 
b. If the needed Java version is not installed on your machine, you will be prompted to install it.
c. Once your Java home directory has been selected, click on Next to continue.

Step 6:
Select other services that need to be installed with Jenkins and click on Next.

Step 7:
Click on the "Install button" to start the installation of Jenkins.

Step 8:
a. Once the installation completes, click on Finish to complete the installation.
b. Jenkins will be installed as a "Windows Service". 
c. You can validate this by browsing the "Windows Services" section in your local computer

Configuration of Jenkins:
a. After downloading, installing and running Jenkins, the post-installation setup wizard begins.
b. This setup wizard takes you through a few quick "one-off" steps to 
 1. unlock Jenkins 
 2. customize it with plugins  
 3. create the first administrator user through which you can continue accessing Jenkins.
c. When you first access a new Jenkins instance (localhost:8080), you are asked to unlock it using an automatically-generated password

Step 1:
Browse to http://localhost:8080 (or whichever port you configured for Jenkins when installing it) and wait until the Unlock Jenkins page appears.

Step 2:
a. The "Initial Administrator password" should be found under the Jenkins installation path (set at Step 2 in Jenkins Installation).
b. For default installation location to 
	C:\Program Files\Jenkins, 
a file called "InitialAdminPassword" can be found under 
	C:\Program Files\Jenkins\secrets.
c. However, If a custom path for Jenkins installation was selected, then you should check that location for "InitialAdminPassword" file.

Step 3:
Open the highlighted file and copy the content of the "InitialAdminPassword" file.

Step 4:
On the "Unlock Jenkins" page, paste this password into the "Administrator password" field and click Continue.
NOTE:
You can also access Jenkins logs in the "jenkins.err.log file" in your Jenkins directory specified during the installation

Customising Jenkins:
a. After unlocking Jenkins, the "Customize Jenkins" page appears. 
b. Here, you can install any number of useful plugins as part of your initial setup.
c. Click one of the two options shown:
 1. Install suggested plugins - to install the recommended set of plugins, which are based on most common use cases.
 2. Select plugins to install - to choose which set of plugins to initially install. When you first access the plugin selection page, the suggested plugins are selected by default.
d. Finally, after customizing Jenkins with plugins, Jenkins asks you to create your "First administrator" user.

Installation of Jenkins using "jenkins.war" file:
The Jenkins "Web application Archive (WAR) file" can be started from the command line like this:
a. Download the latest stable Jenkins WAR file to an appropriate directory on your machine.
b. Open up a terminal/command prompt window to the download directory.
c. Run the command "java -jar jenkins.war".
d. Browse to http://localhost:8080 and wait until the "Unlock Jenkins page" appears.
e. Continue on with the Post-installation setup wizard (Configuring Jenkins and Customising Jenkins) like we have done when we installed "jenkins Installer" 

Architecture of Jenkins:
The architecture of Jenkins is "Master- Slave" Architecture

Master- Slave Architecture in Jenkins:
a. Jenkins "Master" pulls the code from the remote "Github repository" every time there is a code commit
b. Jenkins "Master" distributes the workload to all the Jenkins "Slaves"
c. On request from Jenkins "Master", the "Slaves" carry out "Builds" and "Tests" and produce "Test reports"

Pipeline in Jenkins:
"Pipeline" is a suite of Jenkins features, installed as plugins, which enable implementing and integrating continuous delivery pipelines into Jenkins

Advantages of "Pipeline" in Jenkins:
a. Every "Check-in" triggers pipeline execution
b. "Feedback" is sent to the team in every step (Steps - Code, Build, Deploy, Monitor)
c. Minimize execution time

NOTE:
a. To run a pipeline, we will need "Delivery Pipeline plugin" 
b. The pipelines use "Upstream" and "Downstream" concepts
c. "Upstream" and 'Downstream" are nothing but the jobs triggered after "Post-build actions"

Types of Pipelines:
There are 2 types of Pipelines. They are:
a. Declarative Pipeline
b. Scripted Pipeline

Syntax of Scripted Pipeline:
pipeline
{
 agent any
(or)
agent [If we have any agent]
{
   label 'Agent name'
}
	stages
	{
 stage('Compile')
 {
	steps
	{
	Message you want to execute;
	}
 }
 stage('junit Testing')
 {
	steps
	{
	Message you want to execute;
	}
 }
 stage('Deployment')
 {
	steps
	{
	Message you want to execute;
	}
 }
 stage('Monitoring')
 {
	steps
	{
	Message you want to execute;
	}
 }

	}
}

What is Agent in jenkins? How to activate "Agent" in jenkins?

Scripted Pipeline:
a. "Scripted Pipeline" is based on "Groovy script" as their "Domain Specific language"
b. One or more node blocks does the core work throughout the entire Pipeline

Syntax of Scripted Pipeline:
  
 Jenkinsfile(Scripted Pipeline)
 node
 { (1)
 	stage('Build') (2)
	{ 
	    //     (3)
     	}
	stage('Test') (4)
	{ 
	    //  (5)
	}
	stage('Deploy')  (6)
	{
	    //  (7)
	}
}

(1) Execute this Pipeline on any of its stages on any available agent
(2) Defines the Build stage
(3) Performs steps related to "Build" stage
(4) Defines the "Test" stage
(5) Performs steps related to "Test" stage
(6) Defines the "Deploy" stage
(7) Performs steps related to "Deploy" stage

Declaretive Pipeline:
a. It provides a simple and friendly syntax to define a Pipeline without the need of a "Groovy script"
b. Here, "Pipeline block" defines the work done throughout the Pipeline

Syntax of Declarative Pipeline:

Jenkinsfile (Declarative Pipeline)
pipeline
{
   agent any    (1)
   stages
   {
	stage('Build')    (2)
       	{
	    steps
	   {
	        //               (3)
	   }
	}
	stage('Test')     (4)
       	{
	    steps
	   {
	        //              (5)
	   }
	}
	stage('Deploy')       (6)
       	{
	    steps
	   {
	        //                 (7)
	   }
	}
   }
}

(1) Executes this Pipeline or any of its stages on any available agent
(2) Defines the "Build" stage
(3) Perform steps related to "Build" stage
(4) Defines the "Test" stage
(5) Perform steps related to "Test" stage
(6) Defines the "Deploy" stage
(7) Perform steps related to "Deploy" stage

Scripted Pipeline Vs Declarative Pipeline:
a. "Declarative pipelines" break down stages into individual stages that can contain multiple steps. 
b. "Scripted pipelines" use "Groovy code" and references to the Jenkins pipeline DSL within the stage elements without the need for steps. 
c.  The "Declarative Pipeline" syntax is the best approach to use when new CI/CD workflows are built	

Which Pipeline is better to use in Jenkins?
Answer:
a. "Declarative Pipeline" encourages a declarative programming model 
b.  "Scripted Pipeline" follow a more imperative programming model. 
c. "Declarative type" imposes limitations to the user with a more strict and pre-defined structure, which would be ideal for simpler continuous delivery pipelines

What is "jenkinsfile"?
Answer:
"Jenkinsfile" is a text file that contains the definition of a Jenkins Pipeline and is checked into "Source Control repository"

NOTE:
The commands that you can use to restart Jenkins manually are:
a. http://localhost:8080/restart
b. http://localhost:8080/safeRestart


